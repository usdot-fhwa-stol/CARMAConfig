<?xml version="1.0"?>
<!--
  Copyright (C) 2018-2020 LEIDOS.

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
-->
<!--
	drivers.launch

This file is used for vehicle configurations. The arguments from carma.launch should pass on to carma_src.launch, which should then pass those arguments to this file. The arguments in the carma.launch file will override all of the default values of the arguments being passed, so you should be making changes to the carma.launch to configure it to your vehicle. 

If not using simulated drivers they are activated if the respective mock arguments being passed in are false. These lines below activate the respective actual driver if the respective mock argument being passed is false.

-->

<launch>

  <arg name="vehicle_calibration_dir" default="/opt/carma/vehicle/calibration" doc="Folder containing vehicle calibration directories"/>

  <!-- Mock Drivers -->
  <arg name="mock_drivers"        default="" doc="List of driver node base names which will be launched as mock drivers"/>

  <arg name="mock_can"            value="$(eval 'can' in arg('mock_drivers').split())"/>
  <arg name="mock_comms"          value="$(eval 'comms' in arg('mock_drivers').split())"/>
  <arg name="mock_controller"     value="$(eval 'controller' in arg('mock_drivers').split())"/>
  <arg name="mock_gnss"           value="$(eval 'gnss' in arg('mock_drivers').split())"/>
  <arg name="mock_radar"          value="$(eval 'radar' in arg('mock_drivers').split())"/>
  <arg name="mock_imu"            value="$(eval 'imu' in arg('mock_drivers').split())"/>
  <arg name="mock_lidar"          value="$(eval 'lidar' in arg('mock_drivers').split())"/>
  <arg name="mock_camera"         value="$(eval 'camera' in arg('mock_drivers').split())"/>
  <arg name="mock_roadway_sensor" value="$(eval 'roadway_sensor' in arg('mock_drivers').split())"/>
  <arg name="mock_lightbar"       value="$(eval 'lightbar' in arg('mock_drivers').split())"/>

  <!-- Specific Drivers -->
  <arg name="drivers" default="dsrc_driver ssc_interface_wrapper novatel_gps_driver velodyne_lidar_driver_wrapper lightbar_driver"
    doc="Desired real drivers to launch specified by package name. Mock drivers will take precedence"/>

  <arg name="dsrc_driver"                   value="$(eval ('dsrc_driver' in arg('drivers').split()) and not arg('mock_comms'))"/>
  <arg name="ssc_interface_wrapper"         value="$(eval ('ssc_interface_wrapper' in arg('drivers').split()) and not arg('mock_controller'))"/>
  <arg name="novatel_gps_driver"            value="$(eval ('novatel_gps_driver' in arg('drivers').split()) and not (arg('mock_gnss') or arg('mock_imu')))"/>
  <arg name="velodyne_lidar_driver_wrapper" value="$(eval ('velodyne_lidar_driver_wrapper' in arg('drivers').split()) and not arg('mock_lidar'))"/>
  <arg name="lightbar_driver"               value="$(eval ('lightbar_driver' in arg('drivers').split()) and not arg('mock_lightbar'))"/>

  <!-- DSRC OBU Driver Node -->
  <include if="$(arg dsrc_driver)" file="$(find dsrc_driver)/launch/dsrc_node.launch"/>

  <!-- Data Speed Controller Driver Node -->
  <include if="$(arg ssc_interface_wrapper)" file="$(find ssc_interface_wrapper)/launch/ssc_ds_fusion_driver.launch">
    <arg name="ssc_param_dir" value="$(arg vehicle_calibration_dir)/ssc_ds_fusion"/>
  </include>

  <!-- Novatel GNSS/IMU Driver Nodes -->
  <include if="$(arg novatel_gps_driver)" file="$(find novatel_gps_driver)/launch/novatel_gps_driver_eth.launch">
    <arg name="ip" value="192.168.88.29" />
    <arg name="port" value="2000" />
    <arg name="frame_id" value="novatel_gnss" />
    <arg name="imu_frame_id" value="novatel_imu" />
  </include>

  <!-- Velodyne Lidar Driver Nodes -->
  <include if="$(arg velodyne_lidar_driver_wrapper)" file="$(find velodyne_lidar_driver_wrapper)/launch/velodyne_lidar_driver.launch">
    <arg name="frame_id" value="velodyne"/>
    <arg name="device_ip" value="192.168.1.201"/>
  </include>

    <!-- Lightbar Driver Node -->
    <include if="$(arg lightbar_driver)" file="$(find lightbar_driver)/launch/lightbar_driver_node.launch">
      <arg name="host_name" value="192.168.88.28" />
      <arg name="port" value="80" />
      <arg name="user" value="root" />
      <arg name="password" value="00000000" />
    </include>

  <!-- TODO AVT Vimba Camera Left Driver Node -->
  <!-- TODO AVT Vimba Camera Right Driver Node -->
  <!-- TODO DelphiESR Front Driver Node -->
  <!-- TODO Delphi Srr2 Front Left Driver Node -->
  <!-- TODO Delphi Srr2 Front Right Driver Node -->
  <!-- TODO Delphi Srr2 Rear Left Driver Node -->
  <!-- TODO Delphi Srr2 Rear Right Driver Node -->

</launch>
